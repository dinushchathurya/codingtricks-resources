# Frontend Service - What customers see
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: bookstore
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        # Simple HTML page for demonstration
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: frontend-html
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
  namespace: bookstore
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>ðŸ“š Bookstore Frontend</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .header { background: #4CAF50; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; }
            .api-test { background: #f0f0f0; padding: 15px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ðŸ“š Welcome to Our Bookstore!</h1>
        </div>
        <div class="content">
            <h2>This is the Frontend Service</h2>
            <p>This page is served by our frontend microservice running in Kubernetes!</p>
            <div class="api-test">
                <h3>API Test</h3>
                <p>You can test our API at: <strong>/api/books</strong></p>
                <p>Try: <a href="/api/books">/api/books</a></p>
            </div>
        </div>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: bookstore
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
---
# API Service - Handles book data
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: bookstore
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        version: v1
    spec:
      containers:
      - name: api
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: api-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: api-data
          mountPath: /usr/share/nginx/html
      volumes:
      - name: api-config
        configMap:
          name: api-nginx-config
      - name: api-data
        configMap:
          name: api-data
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-nginx-config
  namespace: bookstore
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location /books {
            root /usr/share/nginx/html;
            try_files /books.json /books.json;
            add_header Content-Type application/json;
        }
        
        location /health {
            return 200 '{"status":"healthy","service":"api"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"message":"Bookstore API v1","endpoints":["/books","/health"]}';
            add_header Content-Type application/json;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-data
  namespace: bookstore
data:
  books.json: |
    {
      "books": [
        {
          "id": 1,
          "title": "Kubernetes for Beginners",
          "author": "Tech Author",
          "price": 29.99,
          "category": "Technology"
        },
        {
          "id": 2,
          "title": "Microservices Patterns",
          "author": "Architecture Expert",
          "price": 39.99,
          "category": "Technology"
        },
        {
          "id": 3,
          "title": "The DevOps Handbook",
          "author": "DevOps Team",
          "price": 34.99,
          "category": "Operations"
        }
      ]
    }
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: bookstore
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
---
# User Service - Handles customer accounts
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: bookstore
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        version: v1
    spec:
      containers:
      - name: user-service
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: user-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: user-config
        configMap:
          name: user-service-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: bookstore
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location /profile {
            return 200 '{"user":"demo","email":"demo@bookstore.com","membership":"premium"}';
            add_header Content-Type application/json;
        }
        
        location /login {
            return 200 '{"message":"Login endpoint - POST your credentials here"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"message":"User Service v1","endpoints":["/profile","/login"]}';
            add_header Content-Type application/json;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: bookstore
spec:
  selector:
    app: user-service
  ports:
  - port: 80
    targetPort: 80